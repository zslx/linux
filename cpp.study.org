* 不要重复发明轮子：C++重用的5重境界
软件领域有一个著名的描述软件重用的谚语：不要重复发明轮子！
这个道理是很简单，也很明白的，谁都不想重复无用的劳动，但具体实践中我们该如何避免重复发明轮子呢？

各位注意了，谚语中是说“重复发明”，不是说“重复使用”，也就是说我们实践中其实也是避免不了重复使用轮子的，因此实践中我们的对策也可以用一句简单的语句表达：发明能够重复使用的轮子！
下面我们就以C++语言为例，看看究竟如何“发明重复使用的轮子”。

 

第一重境界：代码重用
最简单的当然就是代码重用了：写一段公共代码，然后放到各个项目里面去编译。
这种方式最直观，但如果你真的在实践中如此应用，那么将面临如下问题（假设3个项目共用）：

1）一份代码，三份拷贝
因为采用的是代码编译，所以一份代码在存储时会占用3份的磁盘空间，在运行时会占用3份的内存空间。

当然在现在这个磁盘空间动不动上100G，内存动不动上G的年代，可能大家对这种浪费不以为然，但是回过头去看看历史，如果在你的内存只有32M的年代，这种浪费就不一般了，将会对系统产生很大影响。

2）一次修改，三次编译
假如某一天这份代码修改了，也许是一个小小的BUG，也许是一点小小的优化，但最终的结果都是一样的：所有用到这个公共代码的项目都需要重新编译。

对于普通的小程序来说，编译可能是几秒到几分钟的事情，功能验证也很简单，编译问题看起来还不是很严重；但如果是企业级、电信级的程序，这种编译加验证的工作量是巨大的，而且要部署到已经运行的系统中时，可能需要卸载安装。

 

第二重境界：简单DLL
稍有经验的人都知道，要解决代码重用的问题其实已经有简单的方法了，那就是动态链接库（Windows平台是DLL，Linux/UNIX是so，下面以DLL为例说明）。

简单的DLL实现如下：将对象、方法的定义放在DLL里面，使用时只需要包含DLL的头文件即可。

这样简单的一个设计，就能够解决代码重用的一个大问题：一份DLL只占一份磁盘空间、一份内存空间。

但为什么我没有说解决了另外一个大问题――编译的问题呢？

乍一看好像是解决了编译的问题，例如我修改函数体内的某个执行语句，或者加一个逻辑判断，只需要编译DLL就可以了呀！

如果只修改函数体那当然是没有问题，但关键是世界没有那么完美和简单，我们可以做很多的修改，例如：

1）  修改类定义：例如增加一个成员变量。
2）  修改函数定义：例如增加一个函数参数，修改某个入参类型；
3）  修改函数体：例如增加一个语句，一个调用等。

以上修改除了第三种修改只需要编译DLL外，其它两种修改都需要重新编译整个项目，也就是说，DLL能够解决空间和编译的部分问题，不能解决所有的编译问题。

革命尚未成功，同志还需努力！！


第三重境界：代理接口DLL
看到这个名字，可能大家有点迷糊：代理？接口？DLL？三个风马牛不相及的东东扯到一块是什么意思呢？

其实只要按照字面意思就能够大概理解：

代理：就是设计模式中的代理模式；

接口：就是Java中的Interface一个概念；

DLL：就是动态链接库了：）

翻译成一句完整的话就是：DLL通过代理模式对外提供接口。

 
下面我们看看这个“代理接口DLL”是如何实现的。

/*******************************DLL代码*********************************/

//声明部分

class __decspec(dllexport) InterfaceClass{    //声明接口类

    class RealizeClass;                   //引入实现类

    RealizeClass* m_pRealizeClass;        //指向实现类的指针，咦，怎么会有数据？

    public:

    void Function1(int param1, char param2 );

    void Function2(int param1;

    void Function3(bool param1, char param2 );

    ……………………………………………….

}

 

//实现部分

InterfaceClass::InterfaceClass(){

    m_pRealizeClass = new RealizeClass();

}

 

InterfaceClass:: Function1(int param1, char param2 ){

    return m_pRealizeClass-> Function1(param1, param2 );

}

//其它函数略。


第四重境界：继承接口DLL

看起来“代理接口DLL”已经能够很好的完成任务了，但追求完美的你是否总觉得有的地方不够优美呢？

关键就在于这部分：

InterfaceClass:: Function1(int param1, char param2 ){

    return m_pRealizeClass-> Function1(param1, param2 );

}

以上这段代码是代理模式的一种实现方法，但也有它的不足之处：对于RealizeClass的函数，InterfaceClass都要写一个函数，每个函数的写法都是一样的：

return m_pRealizeClass-> FunctionXXX(param1, param2 ……………..);

对于只有几个方法的类来说，这可能没有什么，但是如果RealizeClass类有几十上百个方法，那InterfaceClass就有几十上百个这样类似的函数，看起来是不是很晕呢？

 

有没有一种方法能够不用写这么多的无聊的函数呢？有，这就是本章要介绍的“继承接口DLL”。我们还是按照第三重境界的方法来解释这个方法：

继承：就是面向对象的继承概念

接口：就是Java中的Interface一个概念；

DLL：就是动态链接库了：）

翻译成一句话就是：DLL通过继承的方法对外提供接口

 

如果你还记得第三重境界的实现方式，一对比就会发现，这两个方法其实大同小异，关键就是具体的实现方式不一样：一个通过代理模式，一个通过继承方式。那么我们就来看看这个继承方式具体如何实现。

/*******************************DLL代码声明部分开始**********************/

class InterfaceClass{    //声明接口类,无成员数据，只有方法，这里不用dllexport声明，//为什么呢，请自行查阅相关资料？

    public:

    void Function1(int param1, char param2 ) = 0 //声明为纯虚函数，子类必须改写;

    void Function2(int param1 = 0 ;

    void Function3(bool param1, char param2 ) = 0 ;

}

 

class RealizeClass：：public InterfaceClass{ //继承接口类，函数必须改写

       //成员变量

       …………………………………..

       //继承的函数，需要重写。

    public:

    void Function1(int param1, char param2 );

    void Function2(int param1 );

    void Function3(bool param1, char param2 ) ;

}

 

//这两个函数是“继承接口DLL”实现关键，后面介绍为什么。

extern InterfaceClass* g_InterfaceClassPtr ; //不要和下面的extern混淆哈：）

extern “C” InterfaceClass* __decspec(dllexport)  CreateInterfaceClass();

extern “C” InterfaceClass* __decspec(dllexport)  DeleteInterfaceClass();

/******************************* DLL代码声明部分结束**********************/

 

/*******************************DLL代码定义部分开始**********************/

void RealizeClass::Function1(){

       //函数具体实现，do what you want!!!

    ……………………………..

}

 

void RealizeClass::Function2(){

       //函数具体实现，do what you want!!!

    ……………………………..

}

 

void RealizeClass::Function3(){

       //函数具体实现，do what you want!!!

    ……………………………..

}

 

InterfaceClass* g_InterfaceClassPtr = NULL;

 

InterfaceClass* CreateInterfaceClass(){

   if(g_InterfaceClassPtr == NULL){

       g_InterfaceClassPtr = new RealizeClass(); //生成的是具体的类

}

 

return g_InterfaceClassPtr;

}

 

InterfaceClass* DeleteInterfaceClass(){

     delete g_InterfaceClassPtr;

     g_InterfaceClassPtr = NULL;

}

 

/*******************************DLL代码定义部分结束**********************/

 

 

/***************************使用DLL的客户端代码********************/

InterfaceClass* pInterfaceClass = CreateInterfaceClass();

pInterfaceClass->Function1(param1, param2);

………………………………………………………

DeleteInterfaceClass();

/***************************使用DLL的客户端代码********************/

 

样例代码到这里就结束了，我们来总结一下这种方法的关键实现点：

1）实现类继承接口类，而不是“代理接口DLL”中的接口类包含实现类的指针（UML中的聚合Aggregation的一种实现方式）；

2）由于第一条的存在，使得客户端不能直接new某个对象，所以要通过CreateInterfaceClass来创建一个具体的实现类。

3）由于第二条创建了实现类，为了避免内存泄漏，所以要DeleteInterfaceClass。

 


/*******************************DLL代码*********************************/

 

/***************************使用DLL的客户端代码********************/

InterfaceClass   pInterfaceClass = new InterfaceClass();

pInterfaceClass->Function1(param1, param2);

/***************************使用DLL的客户端代码********************/

各位看完上面的样例，基本上应该都能够明白是如何实现的，但可能会问“为什么还是有一个指针数据类型呢”？不是说没成员数据的吗？

是的，这里关键就在于这个指针，虽然有这个成员数据，但是大家想一想，指针是一个固定大小的类型，而且客户端程序是看不到这个指针的。因此不管对于以下哪个变化，InterfaceClass的结构都不变化，客户端的代码也不受任何影响，不需要重新编译。

1）  具体实现的RealizeClass增加、修改、删除成员数据；

2）  RealizeClass有一天改了名称变成了RealizeClassSE；

3）  RealizeClass的Function1函数改名了，甚至加了一个缺省参数了。

 

讲了半天，基本上把“代理接口DLL”是一个什么东东、如何实现讲完了，但是最根本的问题还没有回答――这重境界要解决什么问题？

其实看完如何实现后，聪明的你基本上都能猜出要解决什么问题了，当然就是第二重境界遗留的两个问题了：

1）  修改类定义：例如增加一个成员变量。

2）  修改函数定义：例如增加一个函数参数，修改某个入参类型；

代理接口DLL通过代理模式（其实本质上就是一个指针）解决了上述两个问题，把对外呈现和内部实现分别由不同的类实现，然后通过一个简单的指针将两个类连接起来

第五重境界：消息通信

话说当年明教教主在连乾坤大挪移的时候，实际上并没有所谓的第7重，这第7重只是创始人凭借着自己的聪明才智想出来的，根本无法证实是否正确，幸好张无忌没有练才躲过一劫。

其实我们这里的所谓第5重也是我凭空想出来的：）大家接下来也可以看到，这一重境界其实和C++或者DLL完全没有关系，但这一重境界绝对不是凭空乱想，而且也绝对不是无法证实的，这一重境界是每个IT人都知道的，也许是每个人进入IT界接触的第一个重用方法――消息通信。

aha，是不是觉得很简单、很普通、很傻很天真？！！

但是仔细想想，这确实是最高的重用境界，我们将这种方法与DLL方法来比较一下：

1）消息通信和编译无关，DLL和编译相关；

2）消息通信支持分布式部署，DLL不支持分布式部署；

3）消息通信和具体语言无关，C++的程序可以和Java的程序通信；

4）消息通信可以和操作系统无关，DLL和操作系统绑定的；

看起来消息通信这种方式几乎完美了，那我们还要DLL干嘛呢？前面讲了那么多，那不是浪费口水和时间？

当然不是了，消息通信也存在缺点的：

1）要通过某种方式来收发消息，例如TCP、SCTP、TDM链路；

2）要制定协议来规定收发消息规则和行为规则；

3）要对发送消息和接受消息进行编解码；

 

总结起来就是消息通信是重量级的，DLL是轻量级的。

 

废话说了这么多，我们举一个简单的样例，由于消息通信实现比较复杂，这里就不写代码了，简单的描述一下。

例如系统有A、B、C、D 4个模块，都需要访问数据库，对数据库进行操作，由于对数据库的操作基本上建立连接、执行操作、释放连接，这些操作基本上都是一样的。

如果是DLL实现方式，那么就把建立连接、执行操作、释放连接做成DLL，然后由每个模块去调用DLL的对应函数。

如果是消息通信，按照如下机制实现一个消息通信：

1）新建一个模块E，这个模块完成建立连接、执行操作、释放操作的功能；

2）规定A、B、C、D通过TCP/IP与E通信；

3）规定消息格式，例如采用TLV编码，或者二进制编码等

4）规定消息内容，例如：发1标识建立连接、100表示建立连接结果，2表示释放连接，200表示释放连接的结果，等等

 

例子到这里就结束了，是不是觉得很简单，或者意犹未尽？

是的，一旦采用消息通信方式，你可以发挥的余地就很大了，还是上面那个例子，我们可以做很多的优化，例如：

1）A、B、C、D不再需要关注建立连接和释放连接了，只需要关注数据操作就ok了；

2）E模块可以采用连接池、多线程等技术来提高性能；

3）如果底层数据库修改了，只需要修改E就可以了，A、B、C、D完全不需要任何修改，其实ABCD都不知道底层数据库是Oracle还是DB2.

4）E可以用任何编程语言编写，也可以运行在任何操作系统上；

5）E进程可以实现双机主备等机制来保证可靠性或者性能；

……………………………………………………

 

总结

好不容易把这个东东讲完了，也算是自己总结归纳了一下，当然，由于才疏学浅，难免出现遗漏和错误，还请大家纠正。

由于篇幅有限，每一篇都写得比较简单，基本上就是把设计思想介绍了一下，实际中应用肯定还有很多问题和细节需要大家去解决，在这里就不一一细讲了（例如第4重境界需要解决多线程的同步问题、第5重境界需要设计好消息格式和消息内容等）。

* 移植、跨平台
  #ifdef _WIN32
  #else
  #endif
* Linux 编译
* Windows 编译 
** 实例 openssl
前提： 安装 perl
从开始菜单启动VS的命令行
Debug # perl Configure --debug VC-WIN32 no-asm no-async
Release # perl Configure VC-WIN32 no-asm no-async --prefix=D:/OpenSSL
# 编辑 Configure 文件，注释掉  "crypto-mdebug"       => "default", 想要启用内存检查
# 修改 /MD => /MT 静态编译，不依赖DLL
nmake
nmake test
nmake install 管理员身份运行
*** 问题处理
打开 vs2010 命令行的时候，出现设置环境变量错误：“此时不应有 。。。”
“Setting environment for using Microsoft Visual Studio 此时不应有“系列问题的罪魁祸首。
关于环境变量的设置。 具体在【我的电脑】->【属性】->【高级系统设置】->【环境变量】，系统变量里面的PATH变量的值。
大概是因为系统的path变量中不允许写双引号”“, 检查错误提示，看哪个路径带了双引号，删除重写添加一次就 OK。
当把其中的双引号去掉之后，先退出 Visual Studio，再打开 Visual Studio，通过菜单栏 再次打开Visual Studio命令提示符的时候，就显示正常了。


C:\Users\zsl\AppData\Local\bin\NASM
*** openssl Release
D:\opensource\openssl-1.1.0e>perl Configure VC-WIN32 no-asm no-async no-threads

* program pack
在C语言中，结构是一种复合数据类型，其构成元素既可以是基本数据类型（如int、long、float等）的变量，也可以是一些复合数据类型（如数组、结构、联合等）的数据单元。在结构中，编译器为结构的每个成员按其自然对界（alignment）条件分配空间。各个成员按照它们被声明的顺序在内存中顺序存储，第一个成员的地址和整个结构的地址相同。
例如，下面的结构各成员空间分配情况：
struct test 
{
     char x1;
     short x2;
     float x3;
     char x4;
};
结 构的第一个成员x1，其偏移地址为0，占据了第1个字节。第二个成员x2为short类型，其起始地址必须2字节 对界，因此，编译器在x2和x1之间填充了一个空字节。结构的第三个成员x3和第四个成员x4恰好落在其自然对界地址上，在它们前面不需要额外的填充字 节。在test结构中，成员x3要求4字节对界，是该结构所有成员中要求的最大对界单元，因而test结构的自然对界条件为4字节，编译器在成员x4后面 填充了3个空字节。整个结构所占据空间为12字节。
更改C编译器的缺省字节对齐方式
在缺省情况下，C编译器为每一个变量或是数据单元按其自然对界条件分配空间。一般地，可以通过下面的方法来改变缺省的对界条件：
     ・ 使用伪指令#pragma pack (n)，C编译器将按照n个字节对齐。
     ・ 使用伪指令#pragma pack ()，取消自定义字节对齐方式。
另外，还有如下的一种方式：
     ・ __attribute((aligned (n)))，让所作用的结构成员对齐在n字节自然边界上。如果结构中有成员的长度大于n，则按照最大成员的长度来对齐。
     ・ __attribute__ ((packed))，取消结构在编译过程中的优化对齐，按照实际占用字节数进行对齐。
以上的n = 1, 2, 4, 8, 16... 第一种方式较为常见。
下面有一道在 CSDN论坛 上讨论火热的题：
Intel和微软等公司同时出现的面试题
#pragma pack(8)
struct s1{
short a;
long b;
};
struct s2{
char c;
s1 d;
long long e;
};
#pragma pack()
问 
1.sizeof(s2) = ?
2.s2的c后面空了几个字节接着是d?
结果如下：
sizeof(S2)结果为24.
成员对齐有一个重要的条件,即每个成员分别对齐.即每个成员按自己的方式对齐.
也就是说上面虽然指定了按8字节对齐,但并不是所有的成员都是以8字节对齐.其对齐的规则是,每个成员按其类型的对齐参数(通常是这个类型的大小)和指定对齐参数(这里是8字节)中较小的一个对齐.并且结构的长度必须为所用过的所有对齐参数的整数倍,不够就补空字节.
S1中,成员a是1字节默认按1字节对齐,指定对齐参数为8,这两个值中取1,a按1字节对齐;成员b是4个字节,默认是按4字节对齐,这时就按4字节对齐,所以sizeof(S1)应该为8;
S2 中,c和S1中的a一样,按1字节对齐,而d 是个结构,它是8个字节,它按什么对齐呢?对于结构来说,它的默认对齐方式就是它的所有成员使用的对齐参数中最大的一个,S1的就是4.所以,成员d就是 按4字节对齐.成员e是8个字节,它是默认按8字节对齐,和指定的一样,所以它对到8字节的边界上,这时,已经使用了12个字节了,所以又添加了4个字节 的空,从第16个字节开始放置成员e.这时,长度为24,已经可以被8(成员e按8字节对齐)整除.这样,一共使用了24个字节.
                          a    b
S1的内存布局：11**,1111,
                          c    S1.a S1.b     d
S2的内存布局：1***,11**,1111,****11111111
这里有三点很重要:
1.每个成员分别按自己的方式对齐,并能最小化长度
2.复杂类型(如结构)的默认对齐方式是它最长的成员的对齐方式,这样在成员是复杂类型时,可以最小化长度
3.对齐后的长度必须是成员中最大的对齐参数的整数倍,这样在处理数组时可以保证每一项都边界对齐
补充一下,对于数组,比如:
char a[3];这种,它的对齐方式和分别写3个char是一样的.也就是说它还是按1个字节对齐.
如果写: typedef char Array3[3];
Array3这种类型的对齐方式还是按1个字节对齐,而不是按它的长度.
不论类型是什么,对齐的边界一定是1,2,4,8,16,32,64....中的一个.
 
* class 基类对象转派生类对象？ No
  # C++对象的扩展方法？ 而不是类的继承和扩展。
  # c++对象的扩展 二进制重用 com corba
  使用开源库，通过继承扩展了某个类的功能。但是其他接口返回的还是基类的对象。
* C & hardware层
http://learn.akae.cn/
Think-C_german_v0.9.4.pdf http://prof.beuth-hochschule.de/fileadmin/user/scheffler/Lehre/Think-C_german_v0.9.4.pdf

<C++ Primer>
每个程序员都应该读《Unix编程艺术》

5.大小端(BigEndian vs Little Endian)
(1).大端方式，也叫网络序，从左往右，第一个8位表示高位，例如0X0102,用比特流表示是0000000100000010。
(2).小端方式，也叫主机序，与大端方式相反，数字0X0102用比特流表示则是0000001000000001，低8位在前，高8位在后。

大端(Big Endian)与小端(Little Endian),低地址 -->　高地址,
LSB（Least Significant Bit）最低有效位
MSB（Most Significant Bit）最高有效位
MSB=1 则表示数据为负值, MSB=0 则表示数据为正。

引用标准的Big-Endian和Little-Endian的定义如下：
a) Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。
b) Big-Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。
c) 网络字节序：4个字节的32 bit值以下面的次序传输：首先是0～7bit，其次8～15bit，然后16～23bit，最后是24~31bit。这种传输次序称作大端字节序。由于 TCP/IP首部中所有的二进制整数在网络中传输时都要求以这种次序，因此它又称作网络字节序。比如，以太网头部中2字节的“以太网帧类型”，表示后面数据的类型。对于ARP请求或应答的以太网帧类型 来说，在网络传输时，发送的顺序是0x08，0x06。在内存中的映象如下图所示：
栈底 （高地址）
---------------
0x06 -- 低位 
0x08 -- 高位
---------------
栈顶 （低地址）
该字段的值为0x0806。按照大端方式存放在内存中。 


* 源码注释 http://www.imaotao.cn/
