# node 服务器逻辑、客户端逻辑、用户交互界面

   https://nodejs.org/en/download/releases/
   https://www.nodebeginner.org/index-zh-cn.html#making-the-request-handlers-respond
   HTTPS server: http://cnodejs.org/topic/54745ac22804a0997d38b32d

* websocket
  https://github.com/websockets/ws
  并发量？ 多少链接？
  刨根问底HTTP和WebSocket协议(三） http://www.jianshu.com/p/99610d84ab2a

var https=require('https');
var ws=require('ws');
var fs=require('fs');
var keypath=process.cwd()+'/server.key';//我把秘钥文件放在运行命令的目录下测试
var certpath=process.cwd()+'/server.crt';//console.log(keypath);
//console.log(certpath);
 
var options = {
  key: fs.readFileSync(keypath),
  cert: fs.readFileSync(certpath),
  passphrase:'1234'//如果秘钥文件有密码的话，用这个属性设置密码
};
 
var server=https.createServer(options, function (req, res) {//要是单纯的https连接的话就会返回这个东西
    res.writeHead(403);//403即可
    res.end("This is a  WebSockets server!\n");
}).listen(25550);
 
 
var wss = new ws.Server( { server: server } );//把创建好的https服务器丢进websocket的创建函数里，ws会用这个服务器来创建wss服务
//同样，如果丢进去的是个http服务的话那么创建出来的还是无加密的ws服务
wss.on( 'connection', function ( wsConnect ) {
    wsConnect.on( 'message', function ( message ) {
        console.log( message );
    });
});

* 微信公众平台开发问题
  http://www.wxapp-union.com/forum.php?mod=viewthread&tid=1909
* node插件http-proxy反向代理实现对端口的分发
  var http = require('http'), httpProxy = require('http-proxy');  
  // 新建一个代理 Proxy Server 对象  
  var proxy = httpProxy.createProxyServer({});  
  // 捕获异常  
  proxy.on('error', function (err, req, res) {  
  res.writeHead(500, {  
  'Content-Type': 'text/plain'  
  });  
  res.end('Something went wrong. And we are reporting a custom error message.');  
  });  
  // 在每次请求中，调用 proxy.web(req, res config) 方法进行请求分发  
  var server = require('http').createServer(function(req, res) {  
  // 在这里可以自定义你的路由分发  
  var host = req.headers.host, ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;  
  console.log("client ip:" + ip + ", host:" + host);  
  switch(host){  
  case 'www.111.cn':   
  proxy.web(req, res, { target: 'http://localhost:3000' });  
  break;  
  case 'vote.111.cn':  
  proxy.web(req, res, { target: 'http://localhost:9527' });  
  break;
  default:  
  res.writeHead(200, {  
  'Content-Type': 'text/plain'  
  });  
  res.end('Welcome to my server!');  
  }  
  });  
  console.log("listening on port 80")  
  server.listen(80);
