# node 服务器逻辑、客户端逻辑、用户交互界面

   https://nodejs.org/en/download/releases/
   https://www.nodebeginner.org/index-zh-cn.html#making-the-request-handlers-respond
   HTTPS server: http://cnodejs.org/topic/54745ac22804a0997d38b32d

* ajax XMLHttpRequest   
https://segmentfault.com/a/1190000004322487
：在CORS标准中做了规定，默认情况下，浏览器在发送跨域请求时，不能发送任何认证信息（credentials）如"cookies"和"HTTP authentication schemes"。除非xhr.withCredentials为true（xhr对象有一个属性叫withCredentials，默认值为false）。

所以根本原因是cookies也是一种认证信息，在跨域请求中，client端必须手动设置xhr.withCredentials=true，且server端也必须允许request能携带认证信息（即response header中包含Access-Control-Allow-Credentials:true），这样浏览器才会自动将cookie加在request header中。

另外，要特别注意一点，一旦跨域request能够携带认证信息，server端一定不能将Access-Control-Allow-Origin设置为*，而必须设置为请求页面的域名。


1. XMLHttpRequestEventTarget接口定义了7个事件：
   onloadstart
   onprogress
   onabort
   ontimeout
   onerror
   onload
   onloadend
2. 每一个XMLHttpRequest里面都有一个upload属性，而upload是一个XMLHttpRequestUpload对象
3. XMLHttpRequest和XMLHttpRequestUpload都继承了同一个XMLHttpRequestEventTarget接口，所以xhr和xhr.upload都有第一条列举的7个事件
4. onreadystatechange是XMLHttpRequest独有的事件
所以这么一看就很清晰了：
xhr一共有8个相关事件：7个XMLHttpRequestEventTarget事件+1个独有的onreadystatechange事件；而xhr.upload只有7个XMLHttpRequestEventTarget事件。

在哪个xhr事件中注册成功回调？
从上面介绍的事件中，可以知道若xhr请求成功，就会触发xhr.onreadystatechange和xhr.onload两个事件。
 那么我们到底要将成功回调注册在哪个事件中呢？我倾向于 xhr.onload事件，
因为xhr.onreadystatechange是每次xhr.readyState变化时都会触发，
而不是xhr.readyState=4时才触发。

 xhr.onload = function () {
    //如果请求成功
    if((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304){
      //do successCallback
    }
  }

   
* C++ 插件
http://nodejs.cn/api/addons.html
实例 https://github.com/arturadib/node-qt
{
  'targets': [
    {
      'target_name': 'qt',
      'sources': [
        'src/qt.cc', 

        'src/QtCore/qsize.cc',
        'src/QtCore/qpointf.cc',

        'src/QtGui/qapplication.cc',
        'src/QtGui/qwidget.cc',
        'src/QtGui/qmouseevent.cc',
        'src/QtGui/qkeyevent.cc',
        'src/QtGui/qpixmap.cc',
        'src/QtGui/qpainter.cc',
        'src/QtGui/qcolor.cc',
        'src/QtGui/qbrush.cc',
        'src/QtGui/qpen.cc',
        'src/QtGui/qimage.cc',
        'src/QtGui/qpainterpath.cc',
        'src/QtGui/qfont.cc',
        'src/QtGui/qmatrix.cc',
        'src/QtGui/qsound.cc',
        'src/QtGui/qscrollarea.cc',
        'src/QtGui/qscrollbar.cc',

        'src/QtTest/qtesteventlist.cc'
      ],
      'conditions': [
        ['OS=="mac"', {
          'include_dirs': [
            'deps/qt-4.8.0/darwin/x64/include',
            'deps/qt-4.8.0/darwin/x64/include/QtCore',
            'deps/qt-4.8.0/darwin/x64/include/QtGui',
            'deps/qt-4.8.0/darwin/x64/include/QtTest'
          ],
          'libraries': [
            # TODO: fix node-gyp behavior that requires ../
            '../deps/qt-4.8.0/darwin/x64/lib/QtCore.framework/QtCore', 
            '../deps/qt-4.8.0/darwin/x64/lib/QtGui.framework/QtGui', 
            '../deps/qt-4.8.0/darwin/x64/lib/QtTest.framework/QtTest'
          ],
        }],
        ['OS=="linux"', {
          'cflags': [
            '<!@(pkg-config --cflags QtCore QtGui QtTest)'
          ],
          'ldflags': [
            '<!@(pkg-config --libs-only-L --libs-only-other QtCore QtGui QtTest)'
          ],
          'libraries': [
            '<!@(pkg-config --libs-only-l QtCore QtGui QtTest)'
          ]
        }],
        ['OS=="win"', {
          'include_dirs': [
              'deps/qt-4.8.0/win32/ia32/include',
              'deps/qt-4.8.0/win32/ia32/include/QtCore',
              'deps/qt-4.8.0/win32/ia32/include/QtGui',
              'deps/qt-4.8.0/win32/ia32/include/QtTest',
          ],
          'libraries': [
              # TODO: fix node-gyp behavior that requires ../
              '../deps/qt-4.8.0/win32/ia32/lib/QtCore4.lib',
              '../deps/qt-4.8.0/win32/ia32/lib/QtGui4.lib',
              '../deps/qt-4.8.0/win32/ia32/lib/QtTest4.lib'
          ]
        }]
      ]
    }
  ]
}

** node-gyp rebuild 停住
node-gyp在编译前会首先尝试下载node的headers文件，像这样：

gyp http GET https://nodejs.org/download/release/v6.8.1/node-v6.8.1-headers.tar.gz

然后就会卡住，

解决方法是：加一个nodedir参数，告诉node-gyp，不需要去网上下载node头文件了，像这样：

node-gyp rebuild --nodedir ~/work/node-v6.8.1
node-gyp rebuild --nodedir /root/node-v8.2.1-linux-x64

问题解决。

* 免费SSL证书
https://www.sslforfree.com/

  http://www.chinaz.com/web/2016/0216/504896.shtml
  http://blog.csdn.net/enweitech/article/details/53213862 八大免费SSL证书-给你的网站免费添加Https安全加密

* websocket
  https://github.com/websockets/ws
  并发量？ 多少链接？
  刨根问底HTTP和WebSocket协议(三） http://www.jianshu.com/p/99610d84ab2a

var https=require('https');
var ws=require('ws');
var fs=require('fs');
var keypath=process.cwd()+'/server.key';//我把秘钥文件放在运行命令的目录下测试
var certpath=process.cwd()+'/server.crt';//console.log(keypath);
//console.log(certpath);
 
var options = {
  key: fs.readFileSync(keypath),
  cert: fs.readFileSync(certpath),
  passphrase:'1234'//如果秘钥文件有密码的话，用这个属性设置密码
};
 
var server=https.createServer(options, function (req, res) {//要是单纯的https连接的话就会返回这个东西
    res.writeHead(403);//403即可
    res.end("This is a  WebSockets server!\n");
}).listen(25550);
 
 
var wss = new ws.Server( { server: server } );//把创建好的https服务器丢进websocket的创建函数里，ws会用这个服务器来创建wss服务
//同样，如果丢进去的是个http服务的话那么创建出来的还是无加密的ws服务
wss.on( 'connection', function ( wsConnect ) {
    wsConnect.on( 'message', function ( message ) {
        console.log( message );
    });
});

* 微信公众平台开发问题
  http://www.wxapp-union.com/forum.php?mod=viewthread&tid=1909
* node插件http-proxy反向代理实现对端口的分发
  var http = require('http'), httpProxy = require('http-proxy');  
  // 新建一个代理 Proxy Server 对象  
  var proxy = httpProxy.createProxyServer({});  
  // 捕获异常  
  proxy.on('error', function (err, req, res) {  
  res.writeHead(500, {  
  'Content-Type': 'text/plain'  
  });  
  res.end('Something went wrong. And we are reporting a custom error message.');  
  });  
  // 在每次请求中，调用 proxy.web(req, res config) 方法进行请求分发  
  var server = require('http').createServer(function(req, res) {  
  // 在这里可以自定义你的路由分发  
  var host = req.headers.host, ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;  
  console.log("client ip:" + ip + ", host:" + host);  
  switch(host){  
  case 'www.111.cn':   
  proxy.web(req, res, { target: 'http://localhost:3000' });  
  break;  
  case 'vote.111.cn':  
  proxy.web(req, res, { target: 'http://localhost:9527' });  
  break;
  default:  
  res.writeHead(200, {  
  'Content-Type': 'text/plain'  
  });  
  res.end('Welcome to my server!');  
  }  
  });  
  console.log("listening on port 80")  
  server.listen(80);
* ES6, ES2015
https://babeljs.cn/learn-es2015/
http://www.ruanyifeng.com/blog/2016/01/babel.html
http://es6.ruanyifeng.com/
* chrome 插件
  https://developer.chrome.com/extensions/getstarted.html
  # 不翻墙看不了啊
  http://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html


